""" Initial database config

Revision ID: 9cd0959e1465
Revises: 
Create Date: 2023-04-17 21:19:03.680920

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "9cd0959e1465"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "addresses",
        sa.Column(
            "address_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("street", sa.Text(), nullable=False),
        sa.Column("city", sa.Text(), nullable=False),
        sa.Column("state", sa.Text(), nullable=False),
        sa.Column("cep", sa.Text(), nullable=False),
        sa.Column("country", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("address_id"),
    )
    op.create_table(
        "equipments",
        sa.Column(
            "equipment_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("manufacturer", sa.Text(), nullable=False),
        sa.Column("model", sa.Text(), nullable=False),
        sa.Column("power", sa.Text(), nullable=False),
        sa.Column("series_number", sa.Text(), nullable=False),
        sa.Column("fabrication_date", sa.TIMESTAMP(), nullable=False),
        sa.Column(
            "has_network_card", sa.Boolean(), server_default="FALSE", nullable=False
        ),
        sa.Column(
            "has_eth_cable", sa.Boolean(), server_default="FALSE", nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), server_default="TRUE", nullable=False),
        sa.PrimaryKeyConstraint("equipment_id"),
        sa.UniqueConstraint("series_number"),
    )
    op.create_index(
        op.f("ix_equipments_has_eth_cable"),
        "equipments",
        ["has_eth_cable"],
        unique=False,
    )
    op.create_index(
        op.f("ix_equipments_has_network_card"),
        "equipments",
        ["has_network_card"],
        unique=False,
    )
    op.create_index(
        op.f("ix_equipments_is_active"), "equipments", ["is_active"], unique=False
    )
    op.create_table(
        "users",
        sa.Column(
            "user_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("phone_number", sa.Text(), nullable=False),
        sa.Column("email", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), server_default="TRUE", nullable=False),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("phone_number"),
    )
    op.create_index(op.f("ix_users_is_active"), "users", ["is_active"], unique=False)
    op.create_table(
        "companies",
        sa.Column(
            "company_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("address_id", postgresql.UUID(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("phone_number", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), server_default="TRUE", nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"],
            ["addresses.address_id"],
        ),
        sa.PrimaryKeyConstraint("company_id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("phone_number"),
    )
    op.create_index(
        op.f("ix_companies_is_active"), "companies", ["is_active"], unique=False
    )
    op.create_table(
        "reports",
        sa.Column(
            "report_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("company_id", postgresql.UUID(), nullable=False),
        sa.Column("equipment_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("preventiva", "corretiva", name="report_types_enum"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), server_default="TRUE", nullable=False),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.company_id"],
        ),
        sa.ForeignKeyConstraint(
            ["equipment_id"],
            ["equipments.equipment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("report_id"),
    )
    op.create_index(
        op.f("ix_reports_is_active"), "reports", ["is_active"], unique=False
    )
    op.create_table(
        "measures",
        sa.Column(
            "measure_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("report_id", postgresql.UUID(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("entrada", "saida", name="measure_types_enum"),
            nullable=False,
        ),
        sa.Column("v", sa.Float(), nullable=True),
        sa.Column("c", sa.Float(), nullable=True),
        sa.Column("p", sa.Float(), nullable=True),
        sa.Column("total_current", sa.Float(), nullable=True),
        sa.Column("total_pot", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), server_default="TRUE", nullable=False),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["reports.report_id"],
        ),
        sa.PrimaryKeyConstraint("measure_id"),
    )
    op.create_index(
        op.f("ix_measures_is_active"), "measures", ["is_active"], unique=False
    )
    op.create_table(
        "preventive_tension_resistence",
        sa.Column(
            "ptr_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("report_id", postgresql.UUID(), nullable=False),
        sa.Column("tension", sa.Float(), nullable=True),
        sa.Column("resistence", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), server_default="TRUE", nullable=False),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["reports.report_id"],
        ),
        sa.PrimaryKeyConstraint("ptr_id"),
    )
    op.create_index(
        op.f("ix_preventive_tension_resistence_is_active"),
        "preventive_tension_resistence",
        ["is_active"],
        unique=False,
    )
    # ### end Alembic commands ###

    op.execute(
        """CREATE OR REPLACE FUNCTION trigger_set_timestamp()
                    RETURNS TRIGGER AS $$
                    BEGIN
                    NEW.updated_at = NOW();
                    RETURN NEW;
                    END;
                    $$ LANGUAGE plpgsql;"""
    )

    op.execute(
        """CREATE TRIGGER set_timestamp
                    BEFORE UPDATE ON users
                    FOR EACH ROW
                    EXECUTE PROCEDURE trigger_set_timestamp();"""
    )

    op.execute(
        """CREATE TRIGGER set_timestamp
                    BEFORE UPDATE ON equipments
                    FOR EACH ROW
                    EXECUTE PROCEDURE trigger_set_timestamp();"""
    )

    op.execute(
        """CREATE TRIGGER set_timestamp
                    BEFORE UPDATE ON companies
                    FOR EACH ROW
                    EXECUTE PROCEDURE trigger_set_timestamp();"""
    )

    op.execute(
        """CREATE TRIGGER set_timestamp
                    BEFORE UPDATE ON reports
                    FOR EACH ROW
                    EXECUTE PROCEDURE trigger_set_timestamp();"""
    )

    op.execute(
        """CREATE TRIGGER set_timestamp
                    BEFORE UPDATE ON measures
                    FOR EACH ROW
                    EXECUTE PROCEDURE trigger_set_timestamp();"""
    )

    op.execute(
        """CREATE TRIGGER set_timestamp
                    BEFORE UPDATE ON preventive_tension_resistence
                    FOR EACH ROW
                    EXECUTE PROCEDURE trigger_set_timestamp();"""
    )

    op.execute(
        """CREATE OR REPLACE FUNCTION update_is_active()
                        RETURNS TRIGGER AS $$
                        DECLARE
                            sql TEXT;
                            child TEXT;
                            fk TEXT;
                            parent TEXT;
                            pk TEXT;
                        begin
                        child := TG_ARGV[0];
                        fk := TG_ARGV[1];
                        parent := TG_TABLE_NAME;
                        pk := TG_ARGV[2];
                        sql := format('UPDATE %I SET is_active=false where %I in (select %I from %I where is_active=false) and is_active = TRUE', child,fk,pk,parent);
                        EXECUTE sql;
                        RETURN new;
                        END;
                        $$ LANGUAGE plpgsql;"""
    )

    op.execute(
        """CREATE OR REPLACE TRIGGER trigger_update_is_active_reports
                    after UPDATE OF is_active ON users
                    EXECUTE PROCEDURE update_is_active('reports', 'user_id', 'user_id');"""
    )

    op.execute(
        """CREATE OR REPLACE TRIGGER trigger_update_is_active_reports
                    after UPDATE OF is_active ON equipments
                    EXECUTE PROCEDURE update_is_active('reports', 'equipment_id', 'equipment_id');"""
    )

    op.execute(
        """CREATE OR REPLACE TRIGGER trigger_update_is_active_reports
                    after UPDATE OF is_active ON companies
                    EXECUTE PROCEDURE update_is_active('reports', 'company_id', 'company_id');"""
    )

    op.execute(
        """CREATE OR REPLACE TRIGGER trigger_update_is_active_measures
                    after UPDATE OF is_active ON reports
                    EXECUTE PROCEDURE update_is_active('measures', 'report_id', 'report_id');"""
    )

    op.execute(
        """CREATE OR REPLACE TRIGGER trigger_update_is_active_preventive_tension_resistence
                    after UPDATE OF is_active ON reports
                    EXECUTE PROCEDURE update_is_active('preventive_tension_resistence', 'report_id', 'report_id');"""
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_preventive_tension_resistence_is_active"),
        table_name="preventive_tension_resistence",
    )
    op.drop_table("preventive_tension_resistence")
    op.drop_index(op.f("ix_measures_is_active"), table_name="measures")
    op.drop_table("measures")
    op.drop_index(op.f("ix_reports_is_active"), table_name="reports")
    op.drop_table("reports")
    op.drop_index(op.f("ix_companies_is_active"), table_name="companies")
    op.drop_table("companies")
    op.drop_index(op.f("ix_users_is_active"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_equipments_is_active"), table_name="equipments")
    op.drop_index(op.f("ix_equipments_has_network_card"), table_name="equipments")
    op.drop_index(op.f("ix_equipments_has_eth_cable"), table_name="equipments")
    op.drop_table("equipments")
    op.drop_table("addresses")
    # ### end Alembic commands ###
    op.execute("DROP TRIGGER set_timestamp ON users;")
    op.execute("DROP TRIGGER set_timestamp ON equipments;")
    op.execute("DROP TRIGGER set_timestamp ON companies;")
    op.execute("DROP TRIGGER set_timestamp ON reports;")
    op.execute("DROP TRIGGER set_timestamp ON measures;")
    op.execute("DROP TRIGGER set_timestamp ON preventive_tension_resistence;")

    op.execute("DROP FUNCTION trigger_set_timestamp;")

    op.execute("DROP TRIGGER trigger_update_is_active_reports ON users;")
    op.execute("DROP TRIGGER trigger_update_is_active_reports ON equipments;")
    op.execute("DROP TRIGGER trigger_update_is_active_reports ON companies;")
    op.execute("DROP TRIGGER trigger_update_is_active_measures ON reports;")
    op.execute(
        "DROP TRIGGER trigger_update_is_active_preventive_tension_resistence ON reports;"
    )
    op.execute("DROP FUNCTION update_is_active;")
